/**
 * Generated by @openapi-codegen
 *
 * @version 0.1.0
 */
import type * as Fetcher from "./apiFetcher";
import { apiFetch } from "./apiFetcher";
import type * as Schemas from "./apiSchemas";

export type UsersControllerFindAllError = Fetcher.ErrorWrapper<undefined>;

export const usersControllerFindAll = (signal?: AbortSignal) =>
  apiFetch<undefined, UsersControllerFindAllError, undefined, {}, {}, {}>({
    url: "/api/users",
    method: "get",
    signal,
  });

export type UsersControllerFindOnePathParams = {
  id: string;
};

export type UsersControllerFindOneError = Fetcher.ErrorWrapper<undefined>;

export type UsersControllerFindOneVariables = {
  pathParams: UsersControllerFindOnePathParams;
};

export const usersControllerFindOne = (
  variables: UsersControllerFindOneVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    undefined,
    UsersControllerFindOneError,
    undefined,
    {},
    {},
    UsersControllerFindOnePathParams
  >({ url: "/api/users/{id}", method: "get", ...variables, signal });

export type RolesControllerCreateError = Fetcher.ErrorWrapper<{
  status: 409;
  payload: Schemas.ErrorDto;
}>;

export type RolesControllerCreateVariables = {
  body: Schemas.CreateRoleDto;
};

export const rolesControllerCreate = (
  variables: RolesControllerCreateVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.Role,
    RolesControllerCreateError,
    Schemas.CreateRoleDto,
    {},
    {},
    {}
  >({ url: "/api/roles", method: "post", ...variables, signal });

export type RolesControllerFindAllError = Fetcher.ErrorWrapper<undefined>;

export type RolesControllerFindAllResponse = Schemas.Role[];

export const rolesControllerFindAll = (signal?: AbortSignal) =>
  apiFetch<
    RolesControllerFindAllResponse,
    RolesControllerFindAllError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/roles", method: "get", signal });

export type RolesControllerFindOnePathParams = {
  slug: string;
};

export type RolesControllerFindOneError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Schemas.ErrorDto;
}>;

export type RolesControllerFindOneVariables = {
  pathParams: RolesControllerFindOnePathParams;
};

export const rolesControllerFindOne = (
  variables: RolesControllerFindOneVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.Role,
    RolesControllerFindOneError,
    undefined,
    {},
    {},
    RolesControllerFindOnePathParams
  >({ url: "/api/roles/{slug}", method: "get", ...variables, signal });

export type RolesControllerRemovePathParams = {
  slug: string;
};

export type RolesControllerRemoveError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Schemas.ErrorDto;
}>;

export type RolesControllerRemoveVariables = {
  pathParams: RolesControllerRemovePathParams;
};

export const rolesControllerRemove = (
  variables: RolesControllerRemoveVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.Role,
    RolesControllerRemoveError,
    undefined,
    {},
    {},
    RolesControllerRemovePathParams
  >({ url: "/api/roles/{slug}", method: "delete", ...variables, signal });

export type AuthControllerSignUpError = Fetcher.ErrorWrapper<undefined>;

export type AuthControllerSignUpVariables = {
  body: Schemas.SignUpDto;
};

export const authControllerSignUp = (
  variables: AuthControllerSignUpVariables,
  signal?: AbortSignal,
) =>
  apiFetch<undefined, AuthControllerSignUpError, Schemas.SignUpDto, {}, {}, {}>(
    { url: "/api/auth/sign-up", method: "post", ...variables, signal },
  );

export type AuthControllerSignInError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Schemas.ErrorDto;
}>;

export type AuthControllerSignInVariables = {
  body: Schemas.SignInDto;
};

export const authControllerSignIn = (
  variables: AuthControllerSignInVariables,
  signal?: AbortSignal,
) =>
  apiFetch<undefined, AuthControllerSignInError, Schemas.SignInDto, {}, {}, {}>(
    { url: "/api/auth/sign-in", method: "post", ...variables, signal },
  );

export type AuthControllerLogoutError = Fetcher.ErrorWrapper<undefined>;

export const authControllerLogout = (signal?: AbortSignal) =>
  apiFetch<undefined, AuthControllerLogoutError, undefined, {}, {}, {}>({
    url: "/api/auth/logout",
    method: "get",
    signal,
  });

export type AuthControllerRefreshError = Fetcher.ErrorWrapper<undefined>;

export const authControllerRefresh = (signal?: AbortSignal) =>
  apiFetch<undefined, AuthControllerRefreshError, undefined, {}, {}, {}>({
    url: "/api/auth/refresh",
    method: "get",
    signal,
  });

export type AuthControllerProfileError = Fetcher.ErrorWrapper<undefined>;

export const authControllerProfile = (signal?: AbortSignal) =>
  apiFetch<undefined, AuthControllerProfileError, undefined, {}, {}, {}>({
    url: "/api/auth/profile",
    method: "get",
    signal,
  });

export const operationsByTag = {
  "\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u0438": {
    usersControllerFindAll,
    usersControllerFindOne,
  },
  "\u0440\u043E\u043B\u0438": {
    rolesControllerCreate,
    rolesControllerFindAll,
    rolesControllerFindOne,
    rolesControllerRemove,
  },
  "\u0430\u0432\u0442\u043E\u0440\u0438\u0437\u0430\u0446\u0438\u044F": {
    authControllerSignUp,
    authControllerSignIn,
    authControllerLogout,
    authControllerRefresh,
    authControllerProfile,
  },
};

/**
 * Generated by @openapi-codegen
 *
 * @version 0.1.0
 */
import * as reactQuery from "@tanstack/react-query";
import { useApiContext, ApiContext } from "./apiContext";
import type * as Fetcher from "./apiFetcher";
import { apiFetch } from "./apiFetcher";
import type * as Schemas from "./apiSchemas";

export type UsersControllerFindAllError = Fetcher.ErrorWrapper<undefined>;

export type UsersControllerFindAllVariables = ApiContext["fetcherOptions"];

export const fetchUsersControllerFindAll = (
  variables: UsersControllerFindAllVariables,
  signal?: AbortSignal,
) =>
  apiFetch<undefined, UsersControllerFindAllError, undefined, {}, {}, {}>({
    url: "/api/users",
    method: "get",
    ...variables,
    signal,
  });

export const useUsersControllerFindAll = <TData = undefined,>(
  variables: UsersControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, UsersControllerFindAllError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, UsersControllerFindAllError, TData>({
    queryKey: queryKeyFn({
      path: "/api/users",
      operationId: "usersControllerFindAll",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchUsersControllerFindAll({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type UsersControllerFindOnePathParams = {
  id: string;
};

export type UsersControllerFindOneError = Fetcher.ErrorWrapper<undefined>;

export type UsersControllerFindOneVariables = {
  pathParams: UsersControllerFindOnePathParams;
} & ApiContext["fetcherOptions"];

export const fetchUsersControllerFindOne = (
  variables: UsersControllerFindOneVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    undefined,
    UsersControllerFindOneError,
    undefined,
    {},
    {},
    UsersControllerFindOnePathParams
  >({ url: "/api/users/{id}", method: "get", ...variables, signal });

export const useUsersControllerFindOne = <TData = undefined,>(
  variables: UsersControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, UsersControllerFindOneError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, UsersControllerFindOneError, TData>({
    queryKey: queryKeyFn({
      path: "/api/users/{id}",
      operationId: "usersControllerFindOne",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchUsersControllerFindOne({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type RolesControllerCreateError = Fetcher.ErrorWrapper<{
  status: 409;
  payload: Schemas.ErrorDto;
}>;

export type RolesControllerCreateVariables = {
  body: Schemas.CreateRoleDto;
} & ApiContext["fetcherOptions"];

export const fetchRolesControllerCreate = (
  variables: RolesControllerCreateVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.Role,
    RolesControllerCreateError,
    Schemas.CreateRoleDto,
    {},
    {},
    {}
  >({ url: "/api/roles", method: "post", ...variables, signal });

export const useRolesControllerCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Role,
      RolesControllerCreateError,
      RolesControllerCreateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.Role,
    RolesControllerCreateError,
    RolesControllerCreateVariables
  >({
    mutationFn: (variables: RolesControllerCreateVariables) =>
      fetchRolesControllerCreate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type RolesControllerFindAllError = Fetcher.ErrorWrapper<undefined>;

export type RolesControllerFindAllResponse = Schemas.Role[];

export type RolesControllerFindAllVariables = ApiContext["fetcherOptions"];

export const fetchRolesControllerFindAll = (
  variables: RolesControllerFindAllVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    RolesControllerFindAllResponse,
    RolesControllerFindAllError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/roles", method: "get", ...variables, signal });

export const useRolesControllerFindAll = <
  TData = RolesControllerFindAllResponse,
>(
  variables: RolesControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      RolesControllerFindAllResponse,
      RolesControllerFindAllError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    RolesControllerFindAllResponse,
    RolesControllerFindAllError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/api/roles",
      operationId: "rolesControllerFindAll",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchRolesControllerFindAll({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type RolesControllerFindOnePathParams = {
  slug: string;
};

export type RolesControllerFindOneError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Schemas.ErrorDto;
}>;

export type RolesControllerFindOneVariables = {
  pathParams: RolesControllerFindOnePathParams;
} & ApiContext["fetcherOptions"];

export const fetchRolesControllerFindOne = (
  variables: RolesControllerFindOneVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.Role,
    RolesControllerFindOneError,
    undefined,
    {},
    {},
    RolesControllerFindOnePathParams
  >({ url: "/api/roles/{slug}", method: "get", ...variables, signal });

export const useRolesControllerFindOne = <TData = Schemas.Role,>(
  variables: RolesControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Role,
      RolesControllerFindOneError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.Role, RolesControllerFindOneError, TData>({
    queryKey: queryKeyFn({
      path: "/api/roles/{slug}",
      operationId: "rolesControllerFindOne",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchRolesControllerFindOne({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type RolesControllerRemovePathParams = {
  slug: string;
};

export type RolesControllerRemoveError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Schemas.ErrorDto;
}>;

export type RolesControllerRemoveVariables = {
  pathParams: RolesControllerRemovePathParams;
} & ApiContext["fetcherOptions"];

export const fetchRolesControllerRemove = (
  variables: RolesControllerRemoveVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.Role,
    RolesControllerRemoveError,
    undefined,
    {},
    {},
    RolesControllerRemovePathParams
  >({ url: "/api/roles/{slug}", method: "delete", ...variables, signal });

export const useRolesControllerRemove = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Role,
      RolesControllerRemoveError,
      RolesControllerRemoveVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.Role,
    RolesControllerRemoveError,
    RolesControllerRemoveVariables
  >({
    mutationFn: (variables: RolesControllerRemoveVariables) =>
      fetchRolesControllerRemove({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type AuthControllerSignUpError = Fetcher.ErrorWrapper<undefined>;

export type AuthControllerSignUpVariables = {
  body: Schemas.SignUpDto;
} & ApiContext["fetcherOptions"];

export const fetchAuthControllerSignUp = (
  variables: AuthControllerSignUpVariables,
  signal?: AbortSignal,
) =>
  apiFetch<undefined, AuthControllerSignUpError, Schemas.SignUpDto, {}, {}, {}>(
    { url: "/api/auth/sign-up", method: "post", ...variables, signal },
  );

export const useAuthControllerSignUp = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      AuthControllerSignUpError,
      AuthControllerSignUpVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    AuthControllerSignUpError,
    AuthControllerSignUpVariables
  >({
    mutationFn: (variables: AuthControllerSignUpVariables) =>
      fetchAuthControllerSignUp({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type AuthControllerSignInError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Schemas.ErrorDto;
}>;

export type AuthControllerSignInVariables = {
  body: Schemas.SignInDto;
} & ApiContext["fetcherOptions"];

export const fetchAuthControllerSignIn = (
  variables: AuthControllerSignInVariables,
  signal?: AbortSignal,
) =>
  apiFetch<undefined, AuthControllerSignInError, Schemas.SignInDto, {}, {}, {}>(
    { url: "/api/auth/sign-in", method: "post", ...variables, signal },
  );

export const useAuthControllerSignIn = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      AuthControllerSignInError,
      AuthControllerSignInVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    AuthControllerSignInError,
    AuthControllerSignInVariables
  >({
    mutationFn: (variables: AuthControllerSignInVariables) =>
      fetchAuthControllerSignIn({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type AuthControllerLogoutError = Fetcher.ErrorWrapper<undefined>;

export type AuthControllerLogoutVariables = ApiContext["fetcherOptions"];

export const fetchAuthControllerLogout = (
  variables: AuthControllerLogoutVariables,
  signal?: AbortSignal,
) =>
  apiFetch<undefined, AuthControllerLogoutError, undefined, {}, {}, {}>({
    url: "/api/auth/logout",
    method: "get",
    ...variables,
    signal,
  });

export const useAuthControllerLogout = <TData = undefined,>(
  variables: AuthControllerLogoutVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, AuthControllerLogoutError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, AuthControllerLogoutError, TData>({
    queryKey: queryKeyFn({
      path: "/api/auth/logout",
      operationId: "authControllerLogout",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchAuthControllerLogout({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type AuthControllerRefreshError = Fetcher.ErrorWrapper<undefined>;

export type AuthControllerRefreshVariables = ApiContext["fetcherOptions"];

export const fetchAuthControllerRefresh = (
  variables: AuthControllerRefreshVariables,
  signal?: AbortSignal,
) =>
  apiFetch<undefined, AuthControllerRefreshError, undefined, {}, {}, {}>({
    url: "/api/auth/refresh",
    method: "get",
    ...variables,
    signal,
  });

export const useAuthControllerRefresh = <TData = undefined,>(
  variables: AuthControllerRefreshVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, AuthControllerRefreshError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, AuthControllerRefreshError, TData>({
    queryKey: queryKeyFn({
      path: "/api/auth/refresh",
      operationId: "authControllerRefresh",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchAuthControllerRefresh({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type AuthControllerProfileError = Fetcher.ErrorWrapper<undefined>;

export type AuthControllerProfileVariables = ApiContext["fetcherOptions"];

export const fetchAuthControllerProfile = (
  variables: AuthControllerProfileVariables,
  signal?: AbortSignal,
) =>
  apiFetch<undefined, AuthControllerProfileError, undefined, {}, {}, {}>({
    url: "/api/auth/profile",
    method: "get",
    ...variables,
    signal,
  });

export const useAuthControllerProfile = <TData = undefined,>(
  variables: AuthControllerProfileVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, AuthControllerProfileError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, AuthControllerProfileError, TData>({
    queryKey: queryKeyFn({
      path: "/api/auth/profile",
      operationId: "authControllerProfile",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchAuthControllerProfile({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type QueryOperation =
  | {
      path: "/api/users";
      operationId: "usersControllerFindAll";
      variables: UsersControllerFindAllVariables;
    }
  | {
      path: "/api/users/{id}";
      operationId: "usersControllerFindOne";
      variables: UsersControllerFindOneVariables;
    }
  | {
      path: "/api/roles";
      operationId: "rolesControllerFindAll";
      variables: RolesControllerFindAllVariables;
    }
  | {
      path: "/api/roles/{slug}";
      operationId: "rolesControllerFindOne";
      variables: RolesControllerFindOneVariables;
    }
  | {
      path: "/api/auth/logout";
      operationId: "authControllerLogout";
      variables: AuthControllerLogoutVariables;
    }
  | {
      path: "/api/auth/refresh";
      operationId: "authControllerRefresh";
      variables: AuthControllerRefreshVariables;
    }
  | {
      path: "/api/auth/profile";
      operationId: "authControllerProfile";
      variables: AuthControllerProfileVariables;
    };
